import {
  require_browser,
  require_lib,
  require_lib2,
  require_prop_types
} from "./chunk-JHWA62D5.js";
import {
  require_react
} from "./chunk-ZOIWZPCO.js";
import {
  __commonJS
} from "./chunk-DFKQJ226.js";

// node_modules/performance-now/lib/performance-now.js
var require_performance_now = __commonJS({
  "node_modules/performance-now/lib/performance-now.js"(exports, module) {
    (function() {
      var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;
      if (typeof performance !== "undefined" && performance !== null && performance.now) {
        module.exports = function() {
          return performance.now();
        };
      } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
        module.exports = function() {
          return (getNanoSeconds() - nodeLoadTime) / 1e6;
        };
        hrtime = process.hrtime;
        getNanoSeconds = function() {
          var hr;
          hr = hrtime();
          return hr[0] * 1e9 + hr[1];
        };
        moduleLoadTime = getNanoSeconds();
        upTime = process.uptime() * 1e9;
        nodeLoadTime = moduleLoadTime - upTime;
      } else if (Date.now) {
        module.exports = function() {
          return Date.now() - loadTime;
        };
        loadTime = Date.now();
      } else {
        module.exports = function() {
          return (/* @__PURE__ */ new Date()).getTime() - loadTime;
        };
        loadTime = (/* @__PURE__ */ new Date()).getTime();
      }
    }).call(exports);
  }
});

// node_modules/raf/index.js
var require_raf = __commonJS({
  "node_modules/raf/index.js"(exports, module) {
    var now = require_performance_now();
    var root = typeof window === "undefined" ? global : window;
    var vendors = ["moz", "webkit"];
    var suffix = "AnimationFrame";
    var raf = root["request" + suffix];
    var caf = root["cancel" + suffix] || root["cancelRequest" + suffix];
    for (i = 0; !raf && i < vendors.length; i++) {
      raf = root[vendors[i] + "Request" + suffix];
      caf = root[vendors[i] + "Cancel" + suffix] || root[vendors[i] + "CancelRequest" + suffix];
    }
    var i;
    if (!raf || !caf) {
      last = 0, id = 0, queue = [], frameDuration = 1e3 / 60;
      raf = function(callback) {
        if (queue.length === 0) {
          var _now = now(), next = Math.max(0, frameDuration - (_now - last));
          last = next + _now;
          setTimeout(function() {
            var cp = queue.slice(0);
            queue.length = 0;
            for (var i2 = 0; i2 < cp.length; i2++) {
              if (!cp[i2].cancelled) {
                try {
                  cp[i2].callback(last);
                } catch (e) {
                  setTimeout(function() {
                    throw e;
                  }, 0);
                }
              }
            }
          }, Math.round(next));
        }
        queue.push({
          handle: ++id,
          callback,
          cancelled: false
        });
        return id;
      };
      caf = function(handle) {
        for (var i2 = 0; i2 < queue.length; i2++) {
          if (queue[i2].handle === handle) {
            queue[i2].cancelled = true;
          }
        }
      };
    }
    var last;
    var id;
    var queue;
    var frameDuration;
    module.exports = function(fn) {
      return raf.call(root, fn);
    };
    module.exports.cancel = function() {
      caf.apply(root, arguments);
    };
    module.exports.polyfill = function(object) {
      if (!object) {
        object = root;
      }
      object.requestAnimationFrame = raf;
      object.cancelAnimationFrame = caf;
    };
  }
});

// node_modules/gl-react-dom/lib/getContext.js
var require_getContext = __commonJS({
  "node_modules/gl-react-dom/lib/getContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var getContext = (canvas, opts, version) => {
      let gl;
      if (version === "webgl2" || version === "auto") {
        gl = canvas.getContext("webgl2", opts);
      }
      if (!gl && (version === "webgl" || version === "auto")) {
        gl = canvas.getContext("webgl", opts) || canvas.getContext("webgl-experimental", opts) || canvas.getContext("experimental-webgl", opts);
      }
      return gl;
    };
    var _default = getContext;
    exports.default = _default;
  }
});

// node_modules/gl-react-dom/lib/loseGL.js
var require_loseGL = __commonJS({
  "node_modules/gl-react-dom/lib/loseGL.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = (gl) => {
      const loseContextExt = gl.getExtension("WEBGL_lose_context");
      if (loseContextExt)
        loseContextExt.loseContext();
    };
    exports.default = _default;
  }
});

// node_modules/gl-react-dom/lib/GLViewDOM.js
var require_GLViewDOM = __commonJS({
  "node_modules/gl-react-dom/lib/GLViewDOM.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _invariant = _interopRequireDefault(require_browser());
    var _getContext = _interopRequireDefault(require_getContext());
    var _loseGL = _interopRequireDefault(require_loseGL());
    var _excluded = ["width", "height", "pixelRatio", "style", "debug", "version"];
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var __DEV__ = true;
    var propTypes = {
      onContextCreate: _propTypes.default.func.isRequired,
      onContextFailure: _propTypes.default.func.isRequired,
      onContextLost: _propTypes.default.func.isRequired,
      onContextRestored: _propTypes.default.func.isRequired,
      webglContextAttributes: _propTypes.default.object,
      width: _propTypes.default.number.isRequired,
      height: _propTypes.default.number.isRequired,
      style: _propTypes.default.object,
      pixelRatio: _propTypes.default.number,
      version: _propTypes.default.string
    };
    var ErrorDebug = class extends _react.Component {
      render() {
        const {
          error
        } = this.props;
        let title = String(error.rawError || error.message || error);
        let detail = String(error.longMessage || error.rawError || "");
        const style = {
          width: "100%",
          height: "100%",
          position: "absolute",
          top: 0,
          left: 0,
          padding: "1em",
          background: "#a00",
          color: "#fff",
          fontSize: "12px",
          lineHeight: "1.2em",
          fontStyle: "normal",
          fontWeight: "normal",
          fontFamily: "monospace",
          overflow: "auto"
        };
        const titleStyle = {
          fontWeight: "bold",
          marginBottom: "1em"
        };
        const detailStyle = {
          whiteSpace: "pre"
        };
        return _react.default.createElement("div", {
          style
        }, _react.default.createElement("div", {
          style: titleStyle
        }, title), _react.default.createElement("div", {
          style: detailStyle
        }, detail));
      }
    };
    var GLViewDOM = class extends _react.Component {
      constructor(...args) {
        super(...args);
        _defineProperty(this, "state", {
          error: null
        });
        _defineProperty(this, "webglContextAttributes", void 0);
        _defineProperty(this, "canvas", void 0);
        _defineProperty(this, "gl", void 0);
        _defineProperty(this, "_onContextLost", (e) => {
          e.preventDefault();
          this.gl = null;
          this.props.onContextLost();
        });
        _defineProperty(this, "_onContextRestored", () => {
          this.gl = this._createContext();
          this.props.onContextRestored(this.gl);
        });
        _defineProperty(this, "onRef", (ref) => {
          this.canvas = ref;
        });
        _defineProperty(this, "debugError", !__DEV__ ? null : (error) => {
          this.setState({
            error
          });
        });
        _defineProperty(this, "afterDraw", !__DEV__ ? null : () => {
          if (this.state.error) {
            this.setState({
              error: null
            });
          }
        });
      }
      componentDidMount() {
        const {
          onContextCreate,
          onContextFailure
        } = this.props;
        const gl = this._createContext();
        if (gl) {
          this.gl = gl;
          onContextCreate(gl);
          const {
            canvas
          } = this;
          (0, _invariant.default)(canvas, "canvas is not settled in GLViewDOM#componentDidMount");
          canvas.addEventListener("webglcontextlost", this._onContextLost);
          canvas.addEventListener("webglcontextrestored", this._onContextRestored);
        } else {
          onContextFailure(new Error("no-webgl-context"));
        }
      }
      componentWillUnmount() {
        if (this.gl) {
          (0, _loseGL.default)(this.gl);
          this.gl = null;
        }
        const {
          canvas
        } = this;
        if (canvas) {
          canvas.removeEventListener("webglcontextlost", this._onContextLost);
          canvas.removeEventListener("webglcontextrestored", this._onContextRestored);
        }
      }
      render() {
        const {
          error
        } = this.state;
        let _this$props = this.props, {
          width,
          height,
          pixelRatio,
          style,
          debug,
          version
        } = _this$props, rest = _objectWithoutProperties(_this$props, _excluded);
        if (!pixelRatio)
          pixelRatio = Number(typeof window === "object" && window.devicePixelRatio || 1);
        for (let k in propTypes) {
          if (rest.hasOwnProperty(k)) {
            delete rest[k];
          }
        }
        return _react.default.createElement("span", {
          style: _objectSpread(_objectSpread({
            position: "relative"
          }, style), {}, {
            display: "inline-block",
            width,
            height
          })
        }, _react.default.createElement("canvas", _extends({
          ref: this.onRef,
          style: {
            width,
            height
          },
          width: width * pixelRatio,
          height: height * pixelRatio
        }, rest)), error ? _react.default.createElement(ErrorDebug, {
          error
        }) : null);
      }
      _createContext() {
        const {
          webglContextAttributes,
          debug,
          version
        } = this.props;
        const gl = (0, _getContext.default)(this.canvas, debug ? _objectSpread(_objectSpread({}, webglContextAttributes), {}, {
          preserveDrawingBuffer: true
        }) : webglContextAttributes, version || "auto");
        this.webglContextAttributes = webglContextAttributes || {};
        return gl;
      }
      captureAsDataURL(...args) {
        if (!this.webglContextAttributes.preserveDrawingBuffer) {
          console.warn("Surface#captureAsDataURL is likely to not work if you don't define webglContextAttributes={{ preserveDrawingBuffer: true }}");
        }
        (0, _invariant.default)(this.canvas, "canvas is no longer available");
        return this.canvas.toDataURL(...args);
      }
      captureAsBlob(...args) {
        if (!this.webglContextAttributes.preserveDrawingBuffer) {
          console.warn("Surface#captureAsBlob is likely to not work if you don't define webglContextAttributes={{ preserveDrawingBuffer: true }}");
        }
        return Promise.resolve().then(() => new Promise((resolve, reject) => this.canvas ? this.canvas.toBlob(resolve, ...args) : reject(new Error("canvas is no longer available"))));
      }
    };
    exports.default = GLViewDOM;
    _defineProperty(GLViewDOM, "propTypes", propTypes);
  }
});

// node_modules/webgltexture-loader-dom-canvas/lib/CanvasTextureLoader.js
var require_CanvasTextureLoader = __commonJS({
  "node_modules/webgltexture-loader-dom-canvas/lib/CanvasTextureLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _webgltextureLoader = require_lib();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var CanvasTextureLoader = class extends _webgltextureLoader.WebGLTextureLoaderSyncHashCache {
      constructor(...args) {
        super(...args);
        _defineProperty(this, "disposes", {});
      }
      canLoad(input) {
        return input instanceof HTMLCanvasElement;
      }
      inputHash(input) {
        return input;
      }
      getNoCache(input) {
        const {
          gl
        } = this;
        const {
          width,
          height
        } = input;
        const texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, input);
        return {
          texture,
          width,
          height
        };
      }
      update(input) {
        const {
          gl
        } = this;
        const {
          texture
        } = this.get(input);
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, input);
      }
    };
    _webgltextureLoader.globalRegistry.add(CanvasTextureLoader);
    var _default = CanvasTextureLoader;
    exports.default = _default;
  }
});

// node_modules/webgltexture-loader-dom-video/lib/VideoTextureLoader.js
var require_VideoTextureLoader = __commonJS({
  "node_modules/webgltexture-loader-dom-video/lib/VideoTextureLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _webgltextureLoader = require_lib();
    var VideoTextureLoader = class extends _webgltextureLoader.WebGLTextureLoaderAsyncHashCache {
      canLoad(input) {
        return input instanceof HTMLVideoElement;
      }
      inputHash(input) {
        return input;
      }
      loadNoCache(input) {
        const {
          gl
        } = this;
        const {
          width,
          height
        } = input;
        let timeout;
        const dispose = () => {
          clearTimeout(timeout);
        };
        const promise = new Promise((resolve, reject) => {
          const checkVideoReady = () => {
            if (input.videoWidth > 0) {
              const texture = gl.createTexture();
              const {
                videoWidth: width2,
                videoHeight: height2
              } = input;
              gl.bindTexture(gl.TEXTURE_2D, texture);
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, input);
              resolve({
                texture,
                width: width2,
                height: height2
              });
            } else {
              timeout = setTimeout(checkVideoReady, 100);
            }
          };
          checkVideoReady();
        });
        return {
          dispose,
          promise
        };
      }
      update(input) {
        const {
          gl
        } = this;
        const res = this.get(input);
        if (!res)
          return;
        gl.bindTexture(gl.TEXTURE_2D, res.texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, input);
      }
    };
    _webgltextureLoader.globalRegistry.add(VideoTextureLoader);
    var _default = VideoTextureLoader;
    exports.default = _default;
  }
});

// node_modules/webgltexture-loader-dom-image-url/lib/ImageURLTextureLoader.js
var require_ImageURLTextureLoader = __commonJS({
  "node_modules/webgltexture-loader-dom-image-url/lib/ImageURLTextureLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _webgltextureLoader = require_lib();
    function loadImage(src, success, failure) {
      let img = new window.Image();
      if (src.slice(0, 5) !== "data:") {
        img.crossOrigin = true;
      }
      img.onload = function() {
        if (img) {
          success(img);
        }
        img = null;
      };
      img.onabort = img.onerror = failure;
      img.src = src;
      return function() {
        if (img) {
          img.onload = null;
          img.onerror = null;
          img.onabort = null;
          img.src = "";
          img = null;
        }
      };
    }
    var ImageURLTextureLoader = class extends _webgltextureLoader.WebGLTextureLoaderAsyncHashCache {
      canLoad(input) {
        return typeof input === "string";
      }
      inputHash(input) {
        return input;
      }
      loadNoCache(src) {
        const {
          gl
        } = this;
        let dispose;
        const promise = new Promise((success, failure) => dispose = loadImage(src, success, failure)).then((img) => {
          const {
            width,
            height
          } = img;
          const texture = gl.createTexture();
          gl.bindTexture(gl.TEXTURE_2D, texture);
          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
          return {
            texture,
            width,
            height
          };
        });
        return {
          promise,
          dispose: () => dispose()
        };
      }
    };
    _webgltextureLoader.globalRegistry.add(ImageURLTextureLoader);
    var _default = ImageURLTextureLoader;
    exports.default = _default;
  }
});

// node_modules/webgltexture-loader-dom/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/webgltexture-loader-dom/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "CanvasTextureLoader", {
      enumerable: true,
      get: function() {
        return _webgltextureLoaderDomCanvas.default;
      }
    });
    Object.defineProperty(exports, "VideoTextureLoader", {
      enumerable: true,
      get: function() {
        return _webgltextureLoaderDomVideo.default;
      }
    });
    Object.defineProperty(exports, "ImageURLTextureLoader", {
      enumerable: true,
      get: function() {
        return _webgltextureLoaderDomImageUrl.default;
      }
    });
    var _webgltextureLoaderDomCanvas = _interopRequireDefault(require_CanvasTextureLoader());
    var _webgltextureLoaderDomVideo = _interopRequireDefault(require_VideoTextureLoader());
    var _webgltextureLoaderDomImageUrl = _interopRequireDefault(require_ImageURLTextureLoader());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});

// node_modules/gl-react-dom/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/gl-react-dom/lib/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Surface = void 0;
    var _glReact = require_lib2();
    var _raf = _interopRequireDefault(require_raf());
    var _GLViewDOM = _interopRequireDefault(require_GLViewDOM());
    require_lib3();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var RenderLessElement = "span";
    var mapRenderableContent = (el) => el instanceof Element ? el.firstElementChild : null;
    var Surface = (0, _glReact.createSurface)({
      GLView: _GLViewDOM.default,
      RenderLessElement,
      mapRenderableContent,
      requestFrame: _raf.default,
      cancelFrame: _raf.default.cancel
    });
    exports.Surface = Surface;
  }
});
export default require_lib4();
//# sourceMappingURL=gl-react-dom.js.map
